# model random forest

from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split

# data memiliki kolom 'calories', 'proteins', 'fat', 'carbohydrate'
features = data[['calories', 'proteins', 'fat', 'carbohydrate']]
scaler = StandardScaler()
features_scaled = scaler.fit_transform(features)
label_encoder = LabelEncoder()
data['category_encoded'] = label_encoder.fit_transform(data['category'])

if 'target' not in data.columns:
    data['target'] = data['category'] 
    
#data split
X = data[['calories', 'proteins', 'fat', 'carbohydrate', 'category_encoded']]
y = data['target']  # Kolom target yang ingin diprediksi
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)

#  Membangun dan Melatih Model Random Forest
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# Membangun model Random Forest
clf = RandomForestClassifier(n_estimators=100, random_state=0)
clf.fit(X_train, y_train)

# Menguji model
y_pred = clf.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)
print(f"Model Accuracy: {accuracy:.2f}")

#Hitung Kebutuhan Kalori
# Misalkan input dari pengguna
age = 25
weight = 70
height = 175
gender = 'male'  # bisa 'female'
activity_level = 'moderate'  # bisa 'sedentary', 'light', 'moderate', 'active', 'very_active'

# Hitung BMR
if gender == 'male':
    bmr = 10 * weight + 6.25 * height - 5 * age + 5
else:
    bmr = 10 * weight + 6.25 * height - 5 * age - 161

# Sesuaikan dengan tingkat aktivitas
activity_factors = {'sedentary': 1.2, 'light': 1.375, 'moderate': 1.55, 'active': 1.725, 'very_active': 1.9}
calorie_needs = bmr * activity_factors[activity_level]

#Tentukan Target Kalori untuk Masing-Masing Makanan
breakfast_calories = calorie_needs * 0.25
lunch_calories = calorie_needs * 0.35
dinner_calories = calorie_needs * 0.40

#prediksi rencana diet
# Prediksi makanan berdasarkan kalori yang tersedia
def recommend_food(calories):
    food_recommendations = data[data['calories'] <= calories]
    return food_recommendations[['name', 'calories']]

# Contoh rekomendasi
breakfast_recommendations = recommend_food(breakfast_calories)
lunch_recommendations = recommend_food(lunch_calories)
dinner_recommendations = recommend_food(dinner_calories)

print("Breakfast Recommendations:")
print(breakfast_recommendations)

print("Lunch Recommendations:")
print(lunch_recommendations)

print("Dinner Recommendations:")
print(dinner_recommendations)