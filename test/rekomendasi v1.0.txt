import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

# Baca data dari file CSV
data = pd.read_csv('clustered_nutritional_data_with_categories.csv')

# Pisahkan fitur dan label
features = data[['calories', 'proteins', 'fat', 'carbohydrate']]
labels = data['category']

# Normalisasi fitur
scaler = StandardScaler()
features_scaled = scaler.fit_transform(features)

# Split data menjadi train dan test
X_train, X_test, y_train, y_test = train_test_split(features_scaled, labels, test_size=0.2, random_state=0)

# Latih model Random Forest
clf = RandomForestClassifier(n_estimators=100, random_state=0)
clf.fit(X_train, y_train)

def calculate_bmr(sex, age, weight, height, activity_level):
    if sex.lower() == 'male':
        bmr = 10 * weight + 6.25 * height - 5 * age + 5
    else:
        bmr = 10 * weight + 6.25 * height - 5 * age - 161

    # Adjust BMR based on activity level
    activity_factors = {
        'sedentary': 1.2,
        'light': 1.375,
        'moderate': 1.55,
        'active': 1.725,
        'very active': 1.9
    }
    bmr *= activity_factors.get(activity_level, 1.2)  # Default to sedentary if unknown

    return bmr

def adjust_calories(bmr, diet_goal):
    if diet_goal == 'maintain':
        return bmr
    elif diet_goal == 'lose weight':
        return bmr - 500  # Defisit kalori sekitar 500 kalori per hari
    elif diet_goal == 'gain weight':
        return bmr + 500  # Surplus kalori sekitar 500 kalori per hari
    else:
        raise ValueError("Invalid diet goal")

def predict_categories(data, model, scaler):
    features = data[['calories', 'proteins', 'fat', 'carbohydrate']]
    features_scaled = scaler.transform(features)
    data['predicted_category'] = model.predict(features_scaled)
    return data

def select_foods(data, category_calories, num_foods_per_category=2):
    selected_foods = []
    for category in data['predicted_category'].unique():
        category_data = data[data['predicted_category'] == category]
        # Pilih makanan dengan kalori mendekati kebutuhan kategori dan batas maksimal
        category_data = category_data[category_data['calories'] <= category_calories]
        # Urutkan berdasarkan kalori dan pilih hingga 2 makanan
        category_data_sorted = category_data.sort_values(by='calories').head(num_foods_per_category)
        selected_foods.append(category_data_sorted)
    return pd.concat(selected_foods)

# Gantikan input pengguna dengan variabel yang sudah diatur
sex = 'male'  # Misalnya
age = 30
weight = 45
height = 170
activity_level = 'active'
diet_goal = 'gain weight'

# Hitung BMR dan tentukan target kalori
bmr = calculate_bmr(sex, age, weight, height, activity_level)
target_calories = adjust_calories(bmr, diet_goal)

breakfast_calories = target_calories * 0.25
lunch_calories = target_calories * 0.45
dinner_calories = target_calories * 0.30

# Pilih makanan yang akan diprediksi
data_with_predictions = predict_categories(data, clf, scaler)

# Pilih makanan untuk setiap waktu makan
breakfast_foods = select_foods(data_with_predictions, breakfast_calories)
lunch_foods = select_foods(data_with_predictions, lunch_calories)
dinner_foods = select_foods(data_with_predictions, dinner_calories)

# Hitung total kalori dari makanan yang dipilih
breakfast_total_calories = breakfast_foods['calories'].sum()
lunch_total_calories = lunch_foods['calories'].sum()
dinner_total_calories = dinner_foods['calories'].sum()

print(f"Total kalori sarapan: {breakfast_total_calories} dari {breakfast_calories} yang diinginkan.")
print(f"Total kalori makan siang: {lunch_total_calories} dari {lunch_calories} yang diinginkan.")
print(f"Total kalori makan malam: {dinner_total_calories} dari {dinner_calories} yang diinginkan.")

# Tampilkan makanan yang dipilih
print("Makanan Sarapan:")
print(breakfast_foods)
print("Makanan Makan Siang:")
print(lunch_foods)
print("Makanan Makan Malam:")
print(dinner_foods)
